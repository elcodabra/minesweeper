{"version":3,"sources":["utils/index.js","worker/index.js","worker/file.worker.js","app/reducer.js","app/constants.js","components/Cell/Cell.js","components/LeftBombs/LeftBombs.js","components/Field/Field.js","components/Settings/Settings.js","components/NewGame/NewGame.js","App.js","app/store.js","reportWebVitals.js","index.js"],"names":["getRandomNumber","excluded","size","random","indexOf","Math","round","getSiblings","num","rows","columns","siblings","x","y","ceil","push","getNumberById","id","bombs","filter","length","worker","Worker","__webpack_public_path__","cellsAdapter","createEntityAdapter","sortComparer","a","b","cellsSlice","createSlice","name","initialState","getInitialState","bombsSize","isGame","isStarted","failedCell","completed","opened","reducers","setNewGame","state","setInitial","action","payload","cellsList","start","stop","step","mapFn","_","i","Array","from","range","setAll","setOpened","randoms","sort","getRandomArray","entities","isFailed","isBomb","ids","cell_id","undefined","number","forEach","postMessage","JSON","parse","stringify","setNumbers","isCompleted","isComplete","setCompleted","current","actions","getSelectors","selectCellById","selectAll","selectById","selectCellIds","selectIds","selectIsSuccess","selectRows","selectColumns","selectBombsLength","selectBombsLeft","isGameSelect","Cell","dispatch","useDispatch","left","useSelector","isOpened","className","cx","onClick","onContextMenu","e","preventDefault","React","memo","LeftBombs","Field","cells","success","style","gridTemplateColumns","pointerEvents","map","Settings","useState","settings","setSettings","handleChange","target","value","parseInt","trim","type","onChange","NewGame","cursor","paddingLeft","App","configureStore","reducer","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","store","document","getElementById","addEventListener","event","data"],"mappings":"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","file":"static/js/main.ef757d41.chunk.js","sourcesContent":["\nexport const range = (start, stop, step = 1, mapFn = (_, i) => start + (i * step)) =>\n  Array.from({\n    length: (stop - start) / step + 1\n  }, mapFn);\n\nexport const getRandomNumber = (excluded, size) => {\n  let random = 0;\n  while (!random || excluded.indexOf(random) > -1) {\n    random = Math.round(Math.random() * size);\n  }\n  return random;\n}\n\nexport const getRandomArray = (length, size, excluded = []) => {\n  let randoms = [];\n  for (let i = 0; i < size; i++) {\n    randoms[i] = getRandomNumber([...randoms, ...excluded], length);\n  }\n  return randoms.sort((a, b) => a - b);\n}\n\nexport const getSiblings = (num, rows, columns) => {\n  if (!num) return null;\n\n  let siblings = [num];\n\n  const x = num % columns || columns;\n  const y = Math.ceil(num / columns);\n\n  if (x - 1 > 0) {\n    siblings.push(num - 1);\n\n    if (y - 1 > 0) {\n      siblings.push(num - 1 - columns);\n    }\n\n    if (y + 1 <= rows) {\n      siblings.push(num - 1 + columns);\n    }\n  }\n\n  if (y - 1 > 0) {\n    siblings.push(num - columns);\n  }\n\n  if (y + 1 <= rows) {\n    siblings.push(num + columns);\n  }\n\n  if (x + 1 <= columns) {\n    siblings.push(num + 1);\n\n    if (y - 1 > 0) {\n      siblings.push(num + 1 - columns);\n    }\n\n    if (y + 1 <= rows) {\n      siblings.push(num + 1 + columns);\n    }\n  }\n\n  return siblings; //.sort((a, b) => a - b);\n}\n\nexport const getNumberById = (id, rows, columns, bombs) =>\n  getSiblings(id, rows, columns).filter(id => bombs.indexOf(id) > -1).length;\n\nexport const getSiblingsForId = (id, rows, columns, bombs, siblings = {}) => {\n  return getSiblings(id, rows, columns).reduce((acc, curId) => {\n    // return if already in set or have bomb\n    if (acc[curId] !== undefined || bombs.indexOf(curId) > -1) return acc;\n\n    const number = getNumberById(curId, rows, columns, bombs);\n    // if (number === null) return acc;\n    if (!number) {\n      return getSiblingsForId(curId, rows, columns, bombs, { ...acc, [curId]: number });\n    }\n    return { ...acc, [curId]: number };\n  }, siblings);\n}\n","import Worker from '../worker/file.worker.js';\n\nconst worker = new Worker();\n\nexport default worker;\n","export default function() {\n  return new Worker(__webpack_public_path__ + \"static/js/file.worker.75543812.worker.js\");\n}\n","\nimport {\n  createSlice,\n  createEntityAdapter,\n} from '@reduxjs/toolkit';\n\nimport { BOMBS, COLUMNS, ROWS } from './constants';\nimport { getNumberById, getRandomArray, range } from '../utils';\n\nimport worker from '../worker';\n\nconst cellsAdapter = createEntityAdapter({\n  sortComparer: (a, b) => a - b,\n});\n\nconst cellsSlice = createSlice({\n  name: 'cells',\n  initialState: cellsAdapter.getInitialState({\n    rows: ROWS,\n    columns: COLUMNS,\n    bombsSize: BOMBS,\n\n    isGame: false,\n    isStarted: false,\n    failedCell: null,\n\n    completed: 0,\n    opened: 0,\n\n    bombs: [],\n  }),\n  reducers: {\n    setNewGame: (state) => {\n      state.isGame = false;\n    },\n    setInitial: (state, action) => {\n      const { rows, columns, bombsSize } = action.payload;\n      state.rows = rows;\n      state.columns = columns;\n      state.bombsSize = bombsSize;\n\n      const length = rows * columns;\n      state.isGame = true;\n      state.isStarted = false;\n\n      const cellsList = range(1, length, 1, (_, id) => ({\n        id: id + 1,\n      }));\n      cellsAdapter.setAll(state, cellsList);\n    },\n    setOpened: (state, action) => {\n      const id = action.payload;\n\n      if (!state.isStarted) {\n        state.isStarted = true;\n        state.bombs = getRandomArray(state.rows * state.columns, state.bombsSize, [id]);\n      }\n\n      if (state.isStarted && state.bombs.indexOf(id) > -1) {\n        state.failedCell = id;\n        state.entities[id].isFailed = true;\n        state.entities[id].isBomb = true;\n        state.ids\n          .filter(cell_id => state.entities[cell_id].number === undefined)\n          .forEach((cell_id) => {\n            const isBomb = state.bombs.indexOf(cell_id) > -1;\n            state.entities[cell_id].isBomb = isBomb;\n            if (!isBomb) {\n              state.entities[cell_id].number = getNumberById(cell_id, state.rows, state.columns, state.bombs);\n            } else {\n              state.entities[cell_id].number = 0;\n            }\n          });\n      } else {\n        // plain object\n        worker.postMessage(JSON.parse(JSON.stringify({\n          id,\n          rows: state.rows,\n          columns: state.columns,\n          bombs: state.bombs,\n        })));\n        /*\n        const siblings = getSiblingsForId(id, state.rows, state.columns, state.bombs);\n        state.ids\n          .filter((cell_id) => siblings[cell_id] !== undefined)\n          .forEach((cell_id) => {\n            state.entities[cell_id].number = siblings[cell_id]\n            if (state.entities[cell_id].isCompleted) {\n              state.entities[cell_id].isComplete = false;\n              state.completed -= 1;\n            }\n          })\n         */\n      }\n    },\n    setNumbers: (state, action) => {\n      const siblings = action.payload;\n      state.ids\n        .filter((cell_id) => siblings[cell_id] !== undefined && state.entities[cell_id].number === undefined)\n        .forEach((cell_id) => {\n          state.entities[cell_id].number = siblings[cell_id]\n          state.opened += 1;\n          if (state.entities[cell_id].isCompleted) {\n            state.entities[cell_id].isComplete = false;\n            state.completed -= 1;\n          }\n        })\n    },\n    setCompleted: (state, action) => {\n      const id = action.payload;\n      const current = state.entities[id];\n      current.isCompleted = !current.isCompleted;\n      state.completed += current.isCompleted ? 1 : -1;\n    },\n  },\n})\n\nexport const { setNewGame, setInitial, setOpened, setCompleted, setNumbers } = cellsSlice.actions;\n\n// Export the customized selectors for this adapter using `getSelectors`\nexport const {\n  selectAll: selectAllCells,\n  selectById: selectCellById,\n  selectIds: selectCellIds\n  // Pass in a selector that returns the posts slice of state\n} = cellsAdapter.getSelectors()\n\nexport const selectIsSuccess = state => {\n  if (state.failedCell) {\n    return false;\n  }\n\n  if (state.completed === state.bombsSize &&\n    state.opened + state.completed === state.rows * state.columns) {\n    return true;\n  }\n\n  return null;\n}\nexport const selectRows = state => state.rows;\nexport const selectColumns = state => state.columns;\nexport const selectBombs = state => state.bombs;\nexport const selectBombsLength = state => state.bombsSize;\nexport const selectBombsLeft = state => state.bombsSize - state.completed;\n\nexport const isGameSelect = state => state.isGame;\n\nexport default cellsSlice.reducer;","\nexport const ROWS = 10;\nexport const COLUMNS = 10;\nexport const BOMBS = 10;\n","import React from 'react';\nimport cx from 'classnames';\nimport { useSelector, useDispatch } from 'react-redux';\n\nimport { setCompleted, setOpened, selectCellById, selectBombsLeft } from '../../app/reducer';\n\nimport './Cell.css';\n\nconst Cell = ({ id }) => {\n  const dispatch = useDispatch();\n  const left = useSelector(selectBombsLeft);\n  const { number, isBomb, isCompleted, isFailed } = useSelector(state => selectCellById(state, id));\n  const isOpened = number || number === 0;\n\n  const handleClick = () => {\n    if (isCompleted || isOpened) return;\n\n    dispatch(setOpened(id));\n  }\n\n  const handleRightClick = (e) => {\n    e.preventDefault();\n    if (isOpened || !left) return;\n\n    dispatch(setCompleted(id));\n  }\n\n  // console.log('Cell');\n\n  return (\n    <span\n      className={cx('Cell', { 'Cell--opened': isOpened }, { 'Cell--failed': isFailed })}\n      onClick={handleClick}\n      onContextMenu={handleRightClick}\n    >\n      {isOpened && isBomb ? '💣' : isCompleted && !isOpened ? '⛳' : isOpened && (number || '')}\n    </span>\n  )\n}\n\nexport default React.memo(Cell);","import React from 'react';\nimport { useSelector } from 'react-redux';\n\nimport {\n  selectBombsLeft\n} from '../../app/reducer';\n\nconst LeftBombs = () => {\n  const left = useSelector(selectBombsLeft);\n\n  return (\n    <p>Left bombs: {left}</p>\n  );\n}\n\nexport default LeftBombs;\n","import React from 'react';\nimport { useSelector } from 'react-redux';\n\nimport { selectColumns, selectIsSuccess, selectCellIds } from '../../app/reducer';\n\nimport Cell from '../Cell';\nimport LeftBombs from '../LeftBombs';\n\nimport './Field.css';\n\nconst Field = () => {\n  const cells = useSelector(selectCellIds);\n  const columns = useSelector(selectColumns);\n  const success = useSelector(selectIsSuccess);\n\n  return (\n    <div className=\"Field\">\n      <LeftBombs />\n      {success !== null && (\n        <div className=\"Field-message\">\n          {success && (\n            <p>Your win!</p>\n          )}\n          {!success && (\n            <p>Fail!</p>\n          )}\n        </div>\n      )}\n      <div\n        className=\"Field-container\"\n        style={{\n          gridTemplateColumns: `repeat(${columns}, 50px [col-start])`,\n          pointerEvents: success !== null ? 'none' : 'all',\n        }}\n      >\n        {cells.map(id => <Cell key={`cell_${id}`} id={id} />)}\n      </div>\n    </div>\n  )\n}\n\nexport default Field;","import React, { useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport {\n  selectBombsLength,\n  selectColumns,\n  selectRows,\n  setInitial\n} from '../../app/reducer';\n\nconst Settings = () => {\n  const rows = useSelector(selectRows);\n  const columns = useSelector(selectColumns);\n  const bombsSize = useSelector(selectBombsLength);\n  const dispatch = useDispatch();\n\n  const [settings, setSettings] = useState({\n    rows,\n    columns,\n    bombsSize,\n  });\n\n  const handleChange = (e) => {\n    if (e.target.name && e.target.value) {\n      setSettings({ ...settings, [e.target.name]: parseInt(e.target.value.trim()) });\n    }\n  }\n\n  return (\n    <div>\n      New Game!\n      <input type=\"number\" name=\"rows\" value={settings.rows} onChange={handleChange} />\n      <input type=\"number\" name=\"columns\" value={settings.columns} onChange={handleChange} />\n      <input type=\"number\" name=\"bombsSize\" value={settings.bombsSize} onChange={handleChange} />\n      <button onClick={() => dispatch(setInitial(settings))}>Go!</button>\n    </div>\n  );\n}\n\nexport default Settings;\n","import React from 'react';\nimport { useDispatch } from 'react-redux';\n\nimport {\n  setNewGame,\n} from '../../app/reducer';\n\nconst NewGame = () => {\n  const dispatch = useDispatch();\n\n  return (\n    <span style={{ cursor: 'pointer', paddingLeft: 20 }} onClick={() => dispatch(setNewGame())}>😊</span>\n  );\n}\n\nexport default NewGame;\n","import React from 'react';\nimport { useSelector } from 'react-redux';\n\nimport { isGameSelect } from './app/reducer';\n\nimport Field from './components/Field';\nimport Settings from './components/Settings';\nimport NewGame from './components/NewGame';\n\nimport './App.css';\n\nfunction App() {\n  const isGame = useSelector(isGameSelect);\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <p>\n          Mine Sweeper\n          <NewGame />\n        </p>\n        {isGame ? (\n          <Field />\n        ) : (\n          <Settings />\n        )}\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","import { configureStore } from '@reduxjs/toolkit';\n\nimport reducer from './reducer';\n\nexport default configureStore({\n  reducer,\n});\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\n\nimport './index.css';\nimport App from './App';\nimport store from './app/store';\nimport reportWebVitals from './reportWebVitals';\nimport { setNumbers } from './app/reducer'\nimport worker from './worker';\n\nconst render = () => {\n  ReactDOM.render(\n    <React.StrictMode>\n      <Provider store={store}>\n        <App />\n      </Provider>\n    </React.StrictMode>,\n    document.getElementById('root')\n  );\n}\n\n// Initial render\nrender();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n\nworker.addEventListener('message', event => {\n  store.dispatch(setNumbers(event.data));\n});"],"sourceRoot":""}